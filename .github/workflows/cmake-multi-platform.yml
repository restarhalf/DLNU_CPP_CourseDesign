name: CMake Multi-Platform (MSVC on Windows)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # 顶层变量明确定义
        os: [ubuntu-latest, macos-latest, windows-latest]
        compiler: [gcc, clang, cl]  # 关键修复：编译器定义为顶层变量
        build_type: [Release, Debug]
        include:
          # Windows 专属配置
          - os: windows-latest
            compiler: cl
            cpp_compiler: cl
            generator: "Visual Studio 17 2022"
            arch: x64
          # Linux 配置
          - os: ubuntu-latest
            compiler: gcc
            cpp_compiler: g++
            generator: "Unix Makefiles"
          # macOS 配置
          - os: macos-latest
            compiler: clang
            cpp_compiler: clang++
            generator: "Xcode"
        # 有效排除无效组合
        exclude:
          - os: windows-latest
            compiler: gcc   # 排除 Windows + GCC
          - os: windows-latest
            compiler: clang # 排除 Windows + Clang

    steps:
    - uses: actions/checkout@v4

    # 仅 Windows 初始化 MSVC 环境
    - name: Setup MSVC
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1  # 自动配置 MSVC 环境变量
      with:
        arch: ${{ matrix.arch || 'x64' }}
        toolset: 14.3  # VS2022 工具链版本

    # 可选：vcpkg 集成示例
    # - name: Setup vcpkg
    #   uses: actions/checkout@v4
    #   with:
    #     repository: microsoft/vcpkg
    #     path: vcpkg
    # - name: Bootstrap vcpkg
    #   run: ./vcpkg/bootstrap-vcpkg.sh
    #   working-directory: vcpkg

    - name: Configure CMake
      run: |
        cmake -B build \
          -G "${{ matrix.generator }}" \
          -DCMAKE_C_COMPILER="${{ matrix.compiler }}" \
          -DCMAKE_CXX_COMPILER="${{ matrix.cpp_compiler }}" \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          # 启用 vcpkg 时添加
          # -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake"

    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }}

    - name: Test
      run: |
        cd build
        ctest -C ${{ matrix.build_type }} --output-on-failure
