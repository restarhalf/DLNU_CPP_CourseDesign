name: CMake Build and Release

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: windows
            artifact_name: FishGame-Windows.exe
            exe_name: DLNU_CPP_CourseDesign.exe
          - os: ubuntu-latest
            platform: linux
            artifact_name: FishGame-Linux.zip
            exe_name: DLNU_CPP_CourseDesign
          - os: macos-latest
            platform: macos
            artifact_name: FishGame-macOS.zip
            exe_name: DLNU_CPP_CourseDesign

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install SDL2 Dependencies (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        curl -L -o SDL2.zip https://github.com/libsdl-org/SDL/releases/download/release-2.28.5/SDL2-devel-2.28.5-VC.zip
        curl -L -o SDL2_image.zip https://github.com/libsdl-org/SDL_image/releases/download/release-2.6.3/SDL2_image-devel-2.6.3-VC.zip
        curl -L -o SDL2_ttf.zip https://github.com/libsdl-org/SDL_ttf/releases/download/release-2.20.2/SDL2_ttf-devel-2.20.2-VC.zip
        curl -L -o SDL2_mixer.zip https://github.com/libsdl-org/SDL_mixer/releases/download/release-2.6.3/SDL2_mixer-devel-2.6.3-VC.zip
        7z x SDL2.zip
        7z x SDL2_image.zip
        7z x SDL2_ttf.zip
        7z x SDL2_mixer.zip

    - name: Install SDL2 Dependencies (Ubuntu)
      if: runner.os == 'Linux' && matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libsdl2-dev libsdl2-image-dev libsdl2-ttf-dev libsdl2-mixer-dev

    - name: Install SDL2 Dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install sdl2 sdl2_image sdl2_ttf sdl2_mixer

    - name: Configure CMake (Desktop Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        cmake -B ${{github.workspace}}/build ^
        -DCMAKE_BUILD_TYPE=Release ^
        -DCMAKE_VERBOSE_MAKEFILE=ON ^
        -DCMAKE_PREFIX_PATH=${{github.workspace}}/lib/dep/plugins/SDL2/cmake

    - name: Configure CMake (Desktop Unix)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        cmake -B ${{github.workspace}}/build \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_VERBOSE_MAKEFILE=ON

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config Release --verbose

    - name: Prepare Release Package (Windows)
      if: runner.os == 'Windows' && matrix.platform == 'windows'
      shell: cmd
      run: |
        mkdir FishGame
        copy "build\Release\${{ matrix.exe_name }}" "FishGame\"
        for /r %%i in (SDL2*.dll) do copy "%%i" "FishGame\"
        xcopy /E /I /Y "asset" "FishGame\asset\"

    - name: Prepare Release Package (Linux/macOS)
      if: matrix.platform != 'windows'
      run: |
        mkdir -p FishGame
        cp "build/${{ matrix.exe_name }}" "FishGame/"
        cp -r asset FishGame/

    - name: Create NSIS Installer (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # 安装 NSIS
        choco install nsis -y
        
        # 创建 NSIS 安装脚本
        @"
        !define APP_NAME "FishGame"
        !define COMP_NAME "DLNU"
        !define VERSION "1.0.0"
        !define COPYRIGHT "© $(Get-Date -Format yyyy) DLNU"
        !define DESCRIPTION "Fish Game"
        !define INSTALLER_NAME "${{ matrix.artifact_name }}"
        
        SetCompressor lzma
        
        Name "$${APP_NAME}"
        Caption "$${APP_NAME} $${VERSION} 安装程序"
        OutFile "$${INSTALLER_NAME}"
        InstallDir "\$PROGRAMFILES\$${APP_NAME}"
        InstallDirRegKey HKLM "Software\$${APP_NAME}" "Install_Dir"
        
        Section "主程序"
          SetOutPath "\$INSTDIR"
          File /r "${{github.workspace}}\FishGame\*"
          
          CreateDirectory "\$SMPROGRAMS\$${APP_NAME}"
          CreateShortCut "\$SMPROGRAMS\$${APP_NAME}\$${APP_NAME}.lnk" "\$INSTDIR\${{ matrix.exe_name }}" "" "\$INSTDIR\${{ matrix.exe_name }}" 0
          CreateShortCut "\$DESKTOP\$${APP_NAME}.lnk" "\$INSTDIR\${{ matrix.exe_name }}" "" "\$INSTDIR\${{ matrix.exe_name }}" 0
        SectionEnd
        
        Section "卸载程序"
          WriteUninstaller "\$INSTDIR\uninstall.exe"
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\$${APP_NAME}" "DisplayName" "$${APP_NAME}"
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\$${APP_NAME}" "UninstallString" "\$INSTDIR\uninstall.exe"
        SectionEnd
        
        Section "Uninstall"
          Delete "\$INSTDIR\uninstall.exe"
          Delete "\$SMPROGRAMS\$${APP_NAME}\$${APP_NAME}.lnk"
          Delete "\$DESKTOP\$${APP_NAME}.lnk"
          RMDir /r "\$SMPROGRAMS\$${APP_NAME}"
          RMDir /r "\$INSTDIR"
          DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\$${APP_NAME}"
        SectionEnd
        "@ | Out-File -FilePath "${{github.workspace}}\installer.nsi" -Encoding UTF8
        
        # 编译 NSIS 脚本
        & 'C:\Program Files (x86)\NSIS\makensis.exe' "${{github.workspace}}\installer.nsi"
        
        # 确保安装包文件存在
        if (Test-Path "${{ matrix.artifact_name }}") {
            Write-Host "安装包成功创建: ${{ matrix.artifact_name }}"
        } else {
            Write-Error "安装包创建失败: ${{ matrix.artifact_name }}"
            exit 1
        }

    - name: Create ZIP Archive (Linux/macOS)
      if: matrix.platform != 'windows'
      run: |
        7z a -tzip ${{ matrix.artifact_name }} ./FishGame/*

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-build
        path: ${{ matrix.artifact_name }}
        if-no-files-found: error

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ matrix.artifact_name }}
        token: ${{ secrets.GITHUB_TOKEN }}
