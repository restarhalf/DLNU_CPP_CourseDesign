name: CMake Build and Release

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: windows
            artifact_name: FishGame-Windows.zip
            exe_name: DLNU_CPP_CourseDesign.exe
          - os: ubuntu-latest
            platform: linux
            artifact_name: FishGame-Linux.zip
            exe_name: DLNU_CPP_CourseDesign
          - os: macos-latest
            platform: macos
            artifact_name: FishGame-macOS.zip
            exe_name: DLNU_CPP_CourseDesign
          - os: ubuntu-22.04
            platform: android
            artifact_name: FishGame-Android.apk
            build_type: android

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK for Android
      if: matrix.platform == 'android'
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Download SDL2 Android
      if: matrix.platform == 'android'
      run: |
        mkdir -p android/SDL2
        curl -L -o SDL2-android.zip https://github.com/libsdl-org/SDL/archive/refs/tags/release-2.28.5.zip
        unzip SDL2-android.zip -d android/SDL2
        # Flatten extracted directory to android/SDL2
        mv android/SDL2/SDL-release-2.28.5/* android/SDL2/
        rm -rf android/SDL2/SDL-release-2.28.5 SDL2-android.zip

    - name: Cache SDL2 Android
      if: matrix.platform == 'android'
      uses: actions/cache@v4
      with:
        path: |
          android/SDL2
        key: sdl2-android-${{ hashFiles('android/app/build.gradle') }}

    - name: Set up Android SDK
      if: matrix.platform == 'android'
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: '9.0'
        cmake-version: '3.22.1'
        ndk-version: '25.1.8937393'

    - name: Install SDL2 Dependencies (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # 创建必要的目录结构
        # PowerShell 创建目录方式
        $sdl2Path = "${{github.workspace}}\lib\dep\plugins\SDL2"
        $sdl2ImagePath = "${{github.workspace}}\lib\dep\plugins\SDL2_image"
        $sdl2TtfPath = "${{github.workspace}}\lib\dep\plugins\SDL2_ttf"
        $sdl2MixerPath = "${{github.workspace}}\lib\dep\plugins\SDL2_mixer"
        
        if(!(Test-Path $sdl2Path)) { New-Item -Path $sdl2Path -ItemType Directory -Force }
        if(!(Test-Path $sdl2ImagePath)) { New-Item -Path $sdl2ImagePath -ItemType Directory -Force }
        if(!(Test-Path $sdl2TtfPath)) { New-Item -Path $sdl2TtfPath -ItemType Directory -Force }
        if(!(Test-Path $sdl2MixerPath)) { New-Item -Path $sdl2MixerPath -ItemType Directory -Force }
        
        # 下载 SDL2 库
        curl -L -o SDL2.zip https://github.com/libsdl-org/SDL/releases/download/release-2.28.5/SDL2-devel-2.28.5-VC.zip
        curl -L -o SDL2_image.zip https://github.com/libsdl-org/SDL_image/releases/download/release-2.6.3/SDL2_image-devel-2.6.3-VC.zip
        curl -L -o SDL2_ttf.zip https://github.com/libsdl-org/SDL_ttf/releases/download/release-2.20.2/SDL2_ttf-devel-2.20.2-VC.zip
        curl -L -o SDL2_mixer.zip https://github.com/libsdl-org/SDL_mixer/releases/download/release-2.6.3/SDL2_mixer-devel-2.6.3-VC.zip
        
        # 解压库文件到指定目录
        # 使用 PowerShell 方式解压和拷贝
        $tempDir = "${{github.workspace}}\temp-extract"
        if(!(Test-Path $tempDir)) { New-Item -Path $tempDir -ItemType Directory -Force }
        
        # SDL2
        7z x SDL2.zip -o"$tempDir"
        $sdl2ExtractDir = "$tempDir\SDL2-2.28.5"
        if(Test-Path $sdl2ExtractDir) {
            Copy-Item -Path "$sdl2ExtractDir\*" -Destination $sdl2Path -Recurse -Force
        } else {
            Write-Error "Could not find extracted SDL2 directory"
            exit 1
        }
        
        # SDL2_image
        7z x SDL2_image.zip -o"$tempDir"
        $sdl2ImageExtractDir = "$tempDir\SDL2_image-2.6.3"
        if(Test-Path $sdl2ImageExtractDir) {
            Copy-Item -Path "$sdl2ImageExtractDir\*" -Destination $sdl2ImagePath -Recurse -Force
        } else {
            Write-Error "Could not find extracted SDL2_image directory"
            exit 1
        }
        
        # SDL2_ttf
        7z x SDL2_ttf.zip -o"$tempDir"
        $sdl2TtfExtractDir = "$tempDir\SDL2_ttf-2.20.2"
        if(Test-Path $sdl2TtfExtractDir) {
            Copy-Item -Path "$sdl2TtfExtractDir\*" -Destination $sdl2TtfPath -Recurse -Force 
        } else {
            Write-Error "Could not find extracted SDL2_ttf directory"
            exit 1
        }
        
        # SDL2_mixer
        7z x SDL2_mixer.zip -o"$tempDir"
        $sdl2MixerExtractDir = "$tempDir\SDL2_mixer-2.6.3"
        if(Test-Path $sdl2MixerExtractDir) {
            Copy-Item -Path "$sdl2MixerExtractDir\*" -Destination $sdl2MixerPath -Recurse -Force
        } else {
            Write-Error "Could not find extracted SDL2_mixer directory"
            exit 1
        }
        
        # 列出解压后的目录结构以便调试
        Get-ChildItem -Path $sdl2Path -Force
        Get-ChildItem -Path "$sdl2Path\include" -Force -ErrorAction SilentlyContinue || Write-Host "Include directory not found"
        Get-ChildItem -Path "$sdl2Path\lib" -Force -ErrorAction SilentlyContinue || Write-Host "Lib directory not found"

    - name: Install SDL2 Dependencies (Ubuntu)
      if: runner.os == 'Linux' && matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libsdl2-dev libsdl2-image-dev libsdl2-ttf-dev libsdl2-mixer-dev

    - name: Install SDL2 Dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install sdl2 sdl2_image sdl2_ttf sdl2_mixer

    - name: Configure CMake (Desktop Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        cmake -B ${{github.workspace}}/build ^
        -DCMAKE_BUILD_TYPE=Release ^
        -DCMAKE_VERBOSE_MAKEFILE=ON

    - name: Configure CMake (Desktop Linux)
      if: runner.os == 'Linux'
      run: |
        cmake -B ${{github.workspace}}/build \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_VERBOSE_MAKEFILE=ON

    - name: Configure CMake (Desktop macOS)
      if: runner.os == 'macOS'
      run: |
        cmake -B ${{github.workspace}}/build \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_VERBOSE_MAKEFILE=ON \
        -DCMAKE_PREFIX_PATH=$(brew --prefix)/lib/cmake

    # Android: native build via Gradle, skip CMake configuration

    - name: Build
      if: matrix.platform != 'android'
      run: cmake --build ${{github.workspace}}/build --config Release --verbose

    - name: Build Android APK
      if: matrix.platform == 'android'
      run: |
        cd android
        ./gradlew assembleRelease
        cp app/build/outputs/apk/release/app-release.apk ../FishGame-Android.apk

    - name: Prepare Release Package (Windows)
      if: runner.os == 'Windows' && matrix.platform == 'windows'
      shell: cmd
      run: |
        mkdir FishGame
        copy "build\Release\${{ matrix.exe_name }}" "FishGame\"
        for /r %%i in (SDL2*.dll) do copy "%%i" "FishGame\"
        xcopy /E /I /Y "asset" "FishGame\asset\"

    - name: Prepare Release Package (Linux/macOS)
      if: matrix.platform != 'android' && matrix.platform != 'windows'
      run: |
        mkdir -p FishGame
        cp "build/${{ matrix.exe_name }}" "FishGame/"
        cp -r asset FishGame/

    - name: Create ZIP Archive (Desktop)
      if: matrix.platform != 'android'
      run: |
        7z a -tzip ${{ matrix.artifact_name }} ./FishGame/*

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-build
        path: ${{ matrix.artifact_name }}

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ matrix.artifact_name }}
        token: ${{ secrets.GITHUB_TOKEN }}
